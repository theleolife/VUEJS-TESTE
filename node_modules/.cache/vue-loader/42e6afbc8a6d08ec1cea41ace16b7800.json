{"remainingRequest":"/Users/admin/IdeaProjects/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/IdeaProjects/frontend/src/components/HelloWorld.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/admin/IdeaProjects/frontend/src/components/HelloWorld.vue","mtime":1602077019571},{"path":"/Users/admin/IdeaProjects/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/IdeaProjects/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/admin/IdeaProjects/frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/admin/IdeaProjects/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/IdeaProjects/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgppbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSwgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJwppbXBvcnQgeyBnZXREYXRhIH0gZnJvbSAnQC9hcGkvaW5kZXgnCgoKQENvbXBvbmVudApleHBvcnQgZGVmYXVsdCBjbGFzcyBIZWxsb1dvcmxkIGV4dGVuZHMgVnVlIHsKICBAUHJvcCgpIHByaXZhdGUgbXNnITogc3RyaW5nOwogIC8vUXVlc3Rpb24gMSBwYWxpbmRyb21zCiAgcHVibGljIHBhbGluZHJvbXM6IHN0cmluZ1tdID0gW10KCiAgcHVibGljIHdvcmQgPSAnJwoKICBnZXQgY2hlY2tlcklzUGFsaW5kcm9tcyAoKXsKICAgIGNvbnN0IHdvcmQgPSB0aGlzLndvcmQKCiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmQubGVuZ3RoLzI7IGkrKykgewogICAgICBpZiAod29yZFtpXSAhPT0gd29yZFt3b3JkLmxlbmd0aCAtIDEgLSBpXSkgewogICAgICAgIHJldHVybiBmYWxzZQogICAgICB9CiAgICB9CiAgICByZXR1cm4gdHJ1ZQogIH0KCiAgLy9RdWVzdGlvbiAyCiAgcHVibGljIGFycmF5VGVzdDogYW55IFtdID0gW10KCiAgZ2V0IG1hcEFwaSgpIHsKICAgIGNvbnN0IG1hcCA9ICBnZXREYXRhKCkKICAgICAgICAgICAgLnRoZW4oIHZhbHVlTWFwID0+IHsKICAgICAgICAgICAgICBjb25zdCByID0gdmFsdWVNYXAubWFwKCB2YWx1ZURhdGEgPT4gewogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codmFsdWVEYXRhKQogICAgICAgICAgICAgICAgdGhpcy5hcnJheVRlc3QucHVzaCh2YWx1ZURhdGEpCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVqZWN0ZWQnLCBlcnJvcikKICAgICAgICAgICAgfSkKICAgIHJldHVybiAgbWFwCiAgfQoKICAvL3F1ZW5zdGlvbiAzCiAgcHVibGljIHZhbHVlcyA9IFsgMSwgMywgMSwgNSwgOCwgNywgOSwgNyBdCgogIHB1YmxpYyBzb3J0KHZhbHVlczogbnVtYmVyW10pIHsKICAgIHJldHVybiBbLi4udmFsdWVzXS5zb3J0KCkKICB9CiAgLy9uZXcgZnVuY3Rpb24gdXNpbmcgc2xpY2UsIHNvcnQKICBwdWJsaWMgc29ydE5ldyAodmFsdWVzOiBudW1iZXJbXSkgewogICAgcmV0dXJuIHZhbHVlcy5zbGljZSgpLnNvcnQoKQogIH0KICAvL1F1ZXN0aW9uIDQKICBnZXQgZ2V0UGFsaW5kcm9tZSAoKSB7CiAgICBjb25zdCBhZGQgPSB0aGlzLnBhbGluZHJvbXMKICAgIGNvbnN0IHdvcmQgPSB0aGlzLndvcmQKICAgIGlmKHRoaXMuY2hlY2tlcklzUGFsaW5kcm9tcyA9PSB0cnVlICYmIHdvcmQubGVuZ3RoID49IDMpewogICAgICB0aGlzLnBhbGluZHJvbXMucHVzaCh3b3JkKQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRoaXMucGFsaW5kcm9tcwogICAgfQogICAgY29uc29sZS5sb2coYWRkKQogICAgcmV0dXJuIGFkZAogIH0KICAvL1F1ZXN0aW9uIDUgIC0tLSBJIHRyaWVkIHRvIHRlc3QgbnBtIHJ1biB0ZXN0IGZ1bmN0aW9ucyBidXQgaXQgd2FzIG5vdCB3b3JraW5nLCBhbmQgSSBkaWQgbm90IGtub3cgaWYgSSBzaG91bGQgbW9kaWZ5IHRlc3QgZmlsZXMgOi8KCgoKCgoKCn0KCg=="},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-container>\n    <v-row>\n      <v-col cols=\"12\">\n        <h1> :) </h1>\n      </v-col>\n\n      <v-col cols=\"12\">\n        <h3>Part 1</h3>\n        <p>\n          Write a component <b>Palindrom.vue</b> with a single input field that checks if the input is a palindrom, like:\n        </p>\n        <label for=\"\">Check Palindrom: </label>\n        <input\n                placeholder=\"Check words here\"\n                type=\"word\"\n                @input=\"checkerIsPalindroms\"\n                v-model=\"word\"\n        >\n\n       <h3> {{checkerIsPalindroms}}</h3>\n        <h3>{{getPalindrome}}</h3>\n\n        <img src=\"/images/palindrom.png\" />\n      </v-col>\n\n      <v-col cols=\"12\">\n        <h3>Part 2</h3>\n        <p>\n          - Write a component <b>GroupBy.vue</b> that displays the aggregated values returned by <b>getData()</b> located in <b>/api/index.ts</b>, like:\n          <pre>\n\n          <h3 v-for=\"(key) in arrayTest\" v-bind:key=\"key\">\n            | {{ key.key }} | {{ key.value }} |\n          </h3>\n\n            | a | 3 |\n            | b | 2 |\n            | c | 1 |\n          </pre>\n          - How could this be accomplished using SQL: SELECT ...\n        </p>\n      </v-col>\n\n        <v-col cols=\"12\">\n          <h3>Part 3</h3>\n          <p>\n            Write your own sorting algorithm that takes <b>values: {{ values }}</b> and sorts them:<br>\n            {{ sort(values) }}\n          </p>\n          <h3>New sorting values: {{sortNew(values)}}</h3>\n\n        </v-col>\n\n        <v-col cols=\"12\">\n          <h3>Part 4</h3>\n          <p>\n            Display a list of palindroms that the user entered in <b>Palindrom.vue:</b><br>\n          </p>\n          <h3>{{ palindroms }}</h3>\n        </v-col>\n\n        <v-col cols=\"12\">\n        <h3>Part 5</h3>\n        <p>\n          Use <b>jest</b> to test the <b>Palindrom.vue</b> component.\n        </p>\n          <p hidden>{{mapApi}}</p>\n        </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue, } from 'vue-property-decorator'\nimport { getData } from '@/api/index'\n\n\n@Component\nexport default class HelloWorld extends Vue {\n  @Prop() private msg!: string;\n  //Question 1 palindroms\n  public palindroms: string[] = []\n\n  public word = ''\n\n  get checkerIsPalindroms (){\n    const word = this.word\n\n    for (let i = 0; i < word.length/2; i++) {\n      if (word[i] !== word[word.length - 1 - i]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  //Question 2\n  public arrayTest: any [] = []\n\n  get mapApi() {\n    const map =  getData()\n            .then( valueMap => {\n              const r = valueMap.map( valueData => {\n                // console.log(valueData)\n                this.arrayTest.push(valueData)\n              })\n            })\n            .catch(error => {\n              console.log('rejected', error)\n            })\n    return  map\n  }\n\n  //quenstion 3\n  public values = [ 1, 3, 1, 5, 8, 7, 9, 7 ]\n\n  public sort(values: number[]) {\n    return [...values].sort()\n  }\n  //new function using slice, sort\n  public sortNew (values: number[]) {\n    return values.slice().sort()\n  }\n  //Question 4\n  get getPalindrome () {\n    const add = this.palindroms\n    const word = this.word\n    if(this.checkerIsPalindroms == true && word.length >= 3){\n      this.palindroms.push(word)\n    } else {\n      return this.palindroms\n    }\n    console.log(add)\n    return add\n  }\n  //Question 5  --- I tried to test npm run test functions but it was not working, and I did not know if I should modify test files :/\n\n\n\n\n\n\n\n}\n\n</script>\n"]}]}